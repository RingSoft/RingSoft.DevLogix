// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RingSoft.DevLogix.Sqlite;

#nullable disable

namespace RingSoft.DevLogix.Sqlite.Migrations
{
    [DbContext(typeof(DevLogixSqliteDbContext))]
    [Migration("20230307022140_ProjectCost")]
    partial class ProjectCost
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool?>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("FromFormula")
                        .HasColumnType("ntext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("RedAlert")
                        .HasColumnType("integer");

                    b.Property<byte?>("RefreshCondition")
                        .HasColumnType("smallint");

                    b.Property<byte?>("RefreshRate")
                        .HasColumnType("smallint");

                    b.Property<int?>("RefreshValue")
                        .HasColumnType("integer");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("YellowAlert")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AdvancedFinds");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFindColumn", b =>
                {
                    b.Property<int>("AdvancedFindId")
                        .HasColumnType("integer");

                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<string>("Caption")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<byte>("DecimalFormatType")
                        .HasColumnType("smallint");

                    b.Property<byte>("FieldDataType")
                        .HasColumnType("smallint");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Formula")
                        .HasColumnType("ntext");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar");

                    b.Property<double>("PercentWidth")
                        .HasColumnType("numeric");

                    b.Property<string>("PrimaryFieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PrimaryTableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("AdvancedFindId", "ColumnId");

                    b.ToTable("AdvancedFindColumns");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFindFilter", b =>
                {
                    b.Property<int>("AdvancedFindId")
                        .HasColumnType("integer");

                    b.Property<int>("FilterId")
                        .HasColumnType("integer");

                    b.Property<bool>("CustomDate")
                        .HasColumnType("bit");

                    b.Property<byte>("DateFilterType")
                        .HasColumnType("smallint");

                    b.Property<byte>("EndLogic")
                        .HasColumnType("smallint");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Formula")
                        .HasColumnType("ntext");

                    b.Property<byte>("FormulaDataType")
                        .HasColumnType("smallint");

                    b.Property<string>("FormulaDisplayValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<byte>("LeftParentheses")
                        .HasColumnType("smallint");

                    b.Property<byte>("Operand")
                        .HasColumnType("smallint");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PrimaryFieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PrimaryTableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<byte>("RightParentheses")
                        .HasColumnType("smallint");

                    b.Property<int?>("SearchForAdvancedFindId")
                        .HasColumnType("integer");

                    b.Property<string>("SearchForValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("AdvancedFindId", "FilterId");

                    b.HasIndex("SearchForAdvancedFindId");

                    b.ToTable("AdvancedFindFilters");
                });

            modelBuilder.Entity("RingSoft.DbLookup.RecordLocking.RecordLock", b =>
                {
                    b.Property<string>("Table")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PrimaryKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("LockDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("User")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Table", "PrimaryKey");

                    b.ToTable("RecordLocks");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("ErrorFailStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("ErrorFixStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("ErrorPassStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("FailText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("FixText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("FtpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("FtpPassword")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<string>("FtpUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("PassText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("ErrorFailStatusId");

                    b.HasIndex("ErrorFixStatusId");

                    b.HasIndex("ErrorPassStatusId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.DevLogixChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.ToTable("DevLogixCharts");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.DevLogixChartBar", b =>
                {
                    b.Property<int>("ChartId")
                        .HasColumnType("integer");

                    b.Property<int>("BarId")
                        .HasColumnType("integer");

                    b.Property<int>("AdvancedFindId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("ChartId", "BarId");

                    b.ToTable("DevLogixChartsBars");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedDeveloperId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedTesterId")
                        .HasColumnType("integer");

                    b.Property<double>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("ErrorDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("ErrorPriorityId")
                        .HasColumnType("integer");

                    b.Property<int>("ErrorStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("FixedVersionId")
                        .HasColumnType("integer");

                    b.Property<int?>("FoundByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("FoundVersionId")
                        .HasColumnType("integer");

                    b.Property<double>("MinutesSpent")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Resolution")
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.HasIndex("AssignedDeveloperId");

                    b.HasIndex("AssignedTesterId");

                    b.HasIndex("ErrorPriorityId");

                    b.HasIndex("ErrorStatusId");

                    b.HasIndex("FixedVersionId");

                    b.HasIndex("FoundByUserId");

                    b.HasIndex("FoundVersionId");

                    b.HasIndex("ProductId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ErrorDeveloper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateFixed")
                        .HasColumnType("datetime");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("integer");

                    b.Property<int>("ErrorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("ErrorId");

                    b.ToTable("ErrorDevelopers");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ErrorPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ErrorPriorities");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ErrorQa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("TEXT");

                    b.Property<int>("ErrorId")
                        .HasColumnType("integer");

                    b.Property<int>("NewStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ErrorId");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("TesterId");

                    b.ToTable("ErrorTesters");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ErrorStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.ToTable("ErrorStatuses");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Rights")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("AppGuid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("ArchiveDepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("ArchivePath")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int>("CreateDepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("InstallerFileName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveDepartmentId");

                    b.HasIndex("CreateDepartmentId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProductVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ArchiveDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVersions");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProductVersionDepartment", b =>
                {
                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReleaseDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("VersionId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ProductVersionDepartments");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.LaborPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<double>("MinutesCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.ToTable("LaborParts");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<double>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<double>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<double>("EstimatedMinutes")
                        .HasColumnType("numeric");

                    b.Property<double?>("FridayHours")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("bit");

                    b.Property<double>("MinutesSpent")
                        .HasColumnType("numeric");

                    b.Property<double?>("MondayHours")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("OriginalDeadline")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<double?>("SaturdayHours")
                        .HasColumnType("numeric");

                    b.Property<double?>("SundayHours")
                        .HasColumnType("numeric");

                    b.Property<double?>("ThursdayHours")
                        .HasColumnType("numeric");

                    b.Property<double?>("TuesdayHours")
                        .HasColumnType("numeric");

                    b.Property<double?>("WednesdayHours")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<double>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<double>("MinutesCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<double>("PercentComplete")
                        .HasColumnType("numeric");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.ProjectTaskLaborPart", b =>
                {
                    b.Property<int>("ProjectTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("DetailId")
                        .HasColumnType("integer");

                    b.Property<bool?>("CommentCrLf")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("LaborPartId")
                        .HasColumnType("integer");

                    b.Property<byte>("LineType")
                        .HasColumnType("smallint");

                    b.Property<double>("MinutesCost")
                        .HasColumnType("numeric");

                    b.Property<string>("ParentRowId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("ProjectTaskId", "DetailId");

                    b.HasIndex("LaborPartId");

                    b.ToTable("ProjectTaskLaborParts");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.ProjectUser", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double>("Cost")
                        .HasColumnType("numeric");

                    b.Property<double?>("FridayHours")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsStandard")
                        .HasColumnType("bit");

                    b.Property<double>("MinutesSpent")
                        .HasColumnType("numeric");

                    b.Property<double?>("MondayHours")
                        .HasColumnType("numeric");

                    b.Property<double?>("SaturdayHours")
                        .HasColumnType("numeric");

                    b.Property<double?>("SundayHours")
                        .HasColumnType("numeric");

                    b.Property<double?>("ThursdayHours")
                        .HasColumnType("numeric");

                    b.Property<double?>("TuesdayHours")
                        .HasColumnType("numeric");

                    b.Property<double?>("WednesdayHours")
                        .HasColumnType("numeric");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.QualityAssurance.ErrorUser", b =>
                {
                    b.Property<int>("ErrorId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double>("Cost")
                        .HasColumnType("numeric");

                    b.Property<double>("MinutesSpent")
                        .HasColumnType("numeric");

                    b.HasKey("ErrorId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorUsers");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.SystemMaster", b =>
                {
                    b.Property<string>("OrganizationName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("OrganizationName");

                    b.ToTable("SystemMaster");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.TimeClock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("AreDatesEdited")
                        .HasColumnType("bit");

                    b.Property<int?>("ErrorId")
                        .HasColumnType("integer");

                    b.Property<double?>("MinutesSpent")
                        .HasColumnType("numeric");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PunchInDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PunchOutDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ErrorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeClocks");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<double>("BillableProjectsMinutesSpent")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ClockDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DefaultChartId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<double>("ErrorsMinutesSpent")
                        .HasColumnType("numeric");

                    b.Property<double>("HourlyRate")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<double>("NonBillableProjectsMinutesSpent")
                        .HasColumnType("numeric");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Rights")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DefaultChartId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.UsersGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UsersGroups");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFindColumn", b =>
                {
                    b.HasOne("RingSoft.DbLookup.AdvancedFind.AdvancedFind", "AdvancedFind")
                        .WithMany("Columns")
                        .HasForeignKey("AdvancedFindId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvancedFind");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFindFilter", b =>
                {
                    b.HasOne("RingSoft.DbLookup.AdvancedFind.AdvancedFind", "AdvancedFind")
                        .WithMany("Filters")
                        .HasForeignKey("AdvancedFindId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RingSoft.DbLookup.AdvancedFind.AdvancedFind", "SearchForAdvancedFind")
                        .WithMany("SearchForAdvancedFindFilters")
                        .HasForeignKey("SearchForAdvancedFindId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdvancedFind");

                    b.Navigation("SearchForAdvancedFind");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Department", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ErrorStatus", "ErrorFailStatus")
                        .WithMany("FailedDepartments")
                        .HasForeignKey("ErrorFailStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ErrorStatus", "ErrorFixStatus")
                        .WithMany("FixedDepartments")
                        .HasForeignKey("ErrorFixStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ErrorStatus", "ErrorPassStatus")
                        .WithMany("PassedDepartments")
                        .HasForeignKey("ErrorPassStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ErrorFailStatus");

                    b.Navigation("ErrorFixStatus");

                    b.Navigation("ErrorPassStatus");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.DevLogixChartBar", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.DevLogixChart", "Chart")
                        .WithMany("ChartBars")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chart");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Error", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "AssignedDeveloper")
                        .WithMany("AssignedDeveloperErrors")
                        .HasForeignKey("AssignedDeveloperId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "AssignedTester")
                        .WithMany("AssignedTesterErrors")
                        .HasForeignKey("AssignedTesterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ErrorPriority", "ErrorPriority")
                        .WithMany("Errors")
                        .HasForeignKey("ErrorPriorityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ErrorStatus", "ErrorStatus")
                        .WithMany("Errors")
                        .HasForeignKey("ErrorStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ProductVersion", "FixedVersion")
                        .WithMany("FixedErrors")
                        .HasForeignKey("FixedVersionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "FoundByUser")
                        .WithMany("FoundByUserErrors")
                        .HasForeignKey("FoundByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ProductVersion", "FoundVersion")
                        .WithMany("FoundErrors")
                        .HasForeignKey("FoundVersionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Product", "Product")
                        .WithMany("Errors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssignedDeveloper");

                    b.Navigation("AssignedTester");

                    b.Navigation("ErrorPriority");

                    b.Navigation("ErrorStatus");

                    b.Navigation("FixedVersion");

                    b.Navigation("FoundByUser");

                    b.Navigation("FoundVersion");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ErrorDeveloper", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "Developer")
                        .WithMany("ErrorDevelopers")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Error", "Error")
                        .WithMany("Developers")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ErrorQa", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Error", "Error")
                        .WithMany("Testers")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ErrorStatus", "NewErrorStatus")
                        .WithMany("ErrorTesters")
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "Tester")
                        .WithMany("ErrorTesters")
                        .HasForeignKey("TesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("NewErrorStatus");

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Product", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Department", "ArchiveDepartment")
                        .WithMany("ArchiveVersionProducts")
                        .HasForeignKey("ArchiveDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Department", "CreateDepartment")
                        .WithMany("CreateVersionProducts")
                        .HasForeignKey("CreateDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArchiveDepartment");

                    b.Navigation("CreateDepartment");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProductVersion", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Product", "Product")
                        .WithMany("Versions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProductVersionDepartment", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Department", "Department")
                        .WithMany("ProductVersionDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ProductVersion", "ProductVersion")
                        .WithMany("ProductVersionDepartments")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("ProductVersion");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.Project", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Product", "Product")
                        .WithMany("Projects")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.ProjectTask", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "User")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.ProjectTaskLaborPart", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.LaborPart", "LaborPart")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("LaborPartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.ProjectTask", "ProjectTask")
                        .WithMany("LaborParts")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LaborPart");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.ProjectUser", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "User")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.QualityAssurance.ErrorUser", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Error", "Error")
                        .WithMany("Users")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "User")
                        .WithMany("ErrorUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.TimeClock", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Error", "Error")
                        .WithMany("TimeClocks")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.Project", "Project")
                        .WithMany("TimeClocks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "User")
                        .WithMany("TimeClocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.User", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.DevLogixChart", "DefaultChart")
                        .WithMany("Users")
                        .HasForeignKey("DefaultChartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "Supervisor")
                        .WithMany("Underlings")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultChart");

                    b.Navigation("Department");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.UsersGroup", b =>
                {
                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RingSoft.DevLogix.DataAccess.Model.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFind", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Filters");

                    b.Navigation("SearchForAdvancedFindFilters");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Department", b =>
                {
                    b.Navigation("ArchiveVersionProducts");

                    b.Navigation("CreateVersionProducts");

                    b.Navigation("ProductVersionDepartments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.DevLogixChart", b =>
                {
                    b.Navigation("ChartBars");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Error", b =>
                {
                    b.Navigation("Developers");

                    b.Navigation("Testers");

                    b.Navigation("TimeClocks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ErrorPriority", b =>
                {
                    b.Navigation("Errors");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ErrorStatus", b =>
                {
                    b.Navigation("ErrorTesters");

                    b.Navigation("Errors");

                    b.Navigation("FailedDepartments");

                    b.Navigation("FixedDepartments");

                    b.Navigation("PassedDepartments");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Group", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.Product", b =>
                {
                    b.Navigation("Errors");

                    b.Navigation("Projects");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProductVersion", b =>
                {
                    b.Navigation("FixedErrors");

                    b.Navigation("FoundErrors");

                    b.Navigation("ProductVersionDepartments");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.LaborPart", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.Project", b =>
                {
                    b.Navigation("ProjectTasks");

                    b.Navigation("ProjectUsers");

                    b.Navigation("TimeClocks");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.ProjectManagement.ProjectTask", b =>
                {
                    b.Navigation("LaborParts");
                });

            modelBuilder.Entity("RingSoft.DevLogix.DataAccess.Model.User", b =>
                {
                    b.Navigation("AssignedDeveloperErrors");

                    b.Navigation("AssignedTesterErrors");

                    b.Navigation("ErrorDevelopers");

                    b.Navigation("ErrorTesters");

                    b.Navigation("ErrorUsers");

                    b.Navigation("FoundByUserErrors");

                    b.Navigation("ProjectTasks");

                    b.Navigation("ProjectUsers");

                    b.Navigation("TimeClocks");

                    b.Navigation("Underlings");

                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
